
#include <openssl/aes.h>
#include <stdio.h>
#include <string.h>
#include <stdint.h>

void xxd(const uint8_t *buffer, int length) {
	for (int line=0; line<length; line+=16) {
		printf("%08x: ", line);
		for (int byte=line; byte<length && byte<line+16; byte++) {
			printf("%02x ", buffer[byte]);
		}
		if (line/16 == length/16) {
			for (int pad=length%16; pad<16; pad++) {
				printf("   ");
			}
		}
		printf(" ");
		for (int byte=line; byte<length && byte<line+16; byte++) {
			uint8_t c = buffer[byte];
			if (c<32 || 127<c) c = 0x2e; // '.'
			printf("%c", c);
		}
		printf("\n");
	}
}

namespace {
	uint8_t const sbox[256] = {
		0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
		0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
		0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
		0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
		0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
		0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
		0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
		0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
		0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
		0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
		0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
		0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
		0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
		0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
		0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
		0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
	};
}

void calc_aes128_rev_schedule (
		uint8_t (& rev_key)[16],  // the AES key
		int round_number,             // round number, base zero
		uint8_t (& round_key)[11][16] // the key schedule
		) {
	uint8_t const rcon[11] = { 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36, };
	memcpy( &(round_key[round_number]), &rev_key, 16);

	for (int r = round_number-1; r>=0; r-=1) {
		for (int b = 15; b >= 4; b--) {
			round_key[r][b] = round_key[r + 1][b] ^ round_key[r + 1][b-4];
		}
		for (int b = 3; b >= 0; b--) {
			round_key[r][b] = round_key[r + 1][b] ^ sbox[round_key[r][(b+1)%4 + 12]];
		}
		round_key[r][0] ^= rcon[r+1];
	}
}

const uint8_t testPlain[16] = {
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
	0x38, 0x39, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66};
const uint8_t testEnc[16] = {
	0xda, 0xa8, 0x64, 0xbc, 0x25, 0x24, 0xfe, 0x8b,
	0x00, 0x4a, 0x86, 0x35, 0x83, 0x80, 0x31, 0x85};

const int Round = 0;
const int Columns = 5;
const uint8_t bruteForceSpace[16][Columns] = {
	{00, C5 BE  C2    6a b1 25 6d
	{01, 75           cb 75 9f
	{02,              f0 0e 16
	{03, 90           2e b4
	{10, B6           6e 52
	{11, E2           06 d7
	{12,              2b de 0c
	{13,              e9 6c 5d a4 44
	{20,              08 d2 58
	{21, D1 B4  A6 4C|71 36 
	{22, 84 8C 04     8c 45 40 51
	{23, F4           b9 df 48 b3 99
	{30,              66 53 70 14
	{31, 72           80 3a
	{32, 98  9F       98 ce 9b
	{33, 6C   9F      f2 a8 04 7b bd
};

void printKey(uint8_t key[11]) {
	printf("Your key is: ");
	for (int j=0; j<16; j++) {
		printf("%02x", key[j]);
	}
	printf("\n");
}

void testCandidates() {
	const int RC=16;
	const int CC=Columns;
	if ( RC*CC != sizeof(bruteForceSpace)) {
		fprintf(stderr, "Test dimensions incorrect.\n");
	}
	for (int row=0; row<RC; row++) {
		for (int col=bruteForceSpace[row][0]+1; col<CC; col++) {
			if (0 != bruteForceSpace[row][col]) {
				fprintf(stderr, "Row %d mis-sized.\n", row);
				break;
			}
		}
	}
}

int main(int argc, char** argv) {
	const uint8_t *plaintext = testPlain;
	const uint8_t *target = testEnc;

	AES_KEY schedule;
	uint8_t key[16];
	uint8_t reverseSchedule[11][16];
	uint8_t counter[16];
	uint8_t ciphertext[16];

	uint64_t difficulty=1;
	for (int i=0; i<16; i++) {
		difficulty *= bruteForceSpace[i][0];
	}
	testCandidates();
	printf("brute forcing %16lu candidates.\n", difficulty);
	if (Round != 0) {
		printf("WARNING: brute forcing using reverse scheduling code is untested...\n");
	}

	uint64_t n=0;
	memset(counter, 1, 16);
	printf("              ----------------");

	while (true) {
		for (int i=0; i<16; i++) {
			key[i] = bruteForceSpace[i][counter[i]];
		}

		if (Round != 0) {
			calc_aes128_rev_schedule(key, Round, reverseSchedule);
			for (int i=0; i<16; i++) {
				key[i] = reverseSchedule[0][i];
			}
		}

		AES_set_encrypt_key(key, 128, &schedule);
		AES_encrypt(plaintext, ciphertext, &schedule);

		if (0 == memcmp(ciphertext, target, 16)) {
			printf("\n*** HIT! ***\n");
			xxd(key, 16);
			xxd(ciphertext, 16);
			xxd(target, 16);
			printKey(key);
			printf("\n              ----------------");
		} else {
			n+=1;
			if (n%4096==0) printf("%16ld", n);
		}

		for (int i=0; i<16; i++) {
			counter[i] += 1;
			if (counter[i] <= bruteForceSpace[i][0]) break;
			counter[i] = 1;
			if (i<15) continue;
			if (i==15) {
				printf("%16ld\n", n);
				return 1;
			}
		}
	}

	return 0;
}
