
#include <stdio.h>

const int ROUNDS = 9; // 9

unsigned char known_102308[240] = {
	0x60, 0xed, 0x82, 0x39, 0x43, 0x0c, 0xd9, 0xc9, 0x46, 0x20, 0x13, 0xab, 0x10, 0xe4, 0x52, 0x2d,
	0x30, 0x06, 0x2f, 0xc4, 0xc0, 0x45, 0xc7, 0x3a, 0xe9, 0x4e, 0x8f, 0x2a, 0x89, 0x5c, 0xc8, 0x64,
	0x2a, 0xf5, 0x99, 0x04, 0x6b, 0x94, 0xd5, 0xe0, 0xd9, 0x75, 0xce, 0xd1, 0xd8, 0x83, 0x8d, 0x93,
	0xe3, 0x84, 0x47, 0x85, 0x8e, 0x69, 0x6c, 0xbb, 0x3a, 0xa1, 0xe9, 0xdd, 0xff, 0x44, 0xc2, 0xd1,
	0x60, 0xed, 0x82, 0x39, 0x43, 0x0c, 0xd9, 0xc9, 0x46, 0x20, 0x13, 0xab, 0x10, 0xe4, 0x52, 0x2d,
	0x96, 0x25, 0x70, 0xea, 0x4c, 0x6f, 0x64, 0x6a, 0xf9, 0x69, 0xd3, 0xa5, 0x25, 0x94, 0x2f, 0x01,
	0x6a, 0xe7, 0x29, 0x3f, 0x61, 0xa1, 0xd5, 0xcf, 0x26, 0xd5, 0xbd, 0x87, 0x42, 0x67, 0x48, 0xff,
	0x60, 0xed, 0x82, 0x39, 0x43, 0x0c, 0xd9, 0xc9, 0x46, 0x20, 0x13, 0xab, 0x10, 0xe4, 0x52, 0x2d,
	0xaa, 0x30, 0x47, 0xef, 0x1f, 0x72, 0x75, 0x13, 0x55, 0x56, 0xc3, 0x6b, 0x4c, 0x43, 0xec, 0x43,
	0x7e, 0x80, 0xa1, 0xc9, 0xbc, 0x57, 0x87, 0xab, 0xb8, 0xfd, 0x6b, 0x9a, 0x4b, 0xe5, 0x22, 0xca,
	0x8a, 0x13, 0xf3, 0x9c, 0x6c, 0x37, 0x3a, 0x57, 0xb4, 0x20, 0xf3, 0x5a, 0x29, 0x0b, 0x3a, 0x45,
	0x46, 0xf8, 0x21, 0x89, 0xa5, 0x3f, 0xa7, 0x9b, 0x62, 0x64, 0x10, 0x30, 0xa8, 0x68, 0x09, 0x31,
	0x69, 0x39, 0x2d, 0x58, 0x78, 0x2d, 0x9f, 0xe0, 0x8b, 0x22, 0x24, 0x6a, 0xc5, 0xf8, 0xb7, 0xbf,
	0xb5, 0x90, 0x36, 0x92, 0x19, 0x7e, 0xdc, 0x54, 0x53, 0x37, 0x31, 0xda, 0xa2, 0x58, 0x3c, 0xd4,
	0x4f, 0xaa, 0x1a, 0x02, 0x06, 0x2b, 0x23, 0x28, 0x34, 0x99, 0x1d, 0xa5, 0x3c, 0x78, 0x9a, 0x07,
};

unsigned char key_102268[32] = {
	0x44, 0x11, 0xbb, 0xce, 0xf0, 0xaa, 0x4a, 0xb4,  0xfa, 0x1a, 0xd1, 0x0a, 0xe0, 0x9b, 0xbd, 0x3d,
	0x88, 0xe3, 0x36, 0xd9, 0x47, 0x16, 0xea, 0xd7,  0x5c, 0x00, 0x41, 0xcf, 0xa1, 0xf7, 0xd9, 0x80,
};

unsigned char simulated_schedule[160] = {
	0x44, 0x11, 0xbb, 0xce, 0xf0, 0xaa, 0x4a, 0xb4,  0xfa, 0x1a, 0xd1, 0x0a, 0xe0, 0x9b, 0xbd, 0x3d,
	0x88, 0xe3, 0x36, 0xd9, 0x47, 0x16, 0xea, 0xd7,  0x5c, 0x00, 0x41, 0xcf, 0xa1, 0xf7, 0xd9, 0x80,
	0x4a, 0xd4, 0x07, 0xae, 0xa8, 0x1c, 0x24, 0x62,  0x3d, 0x3f, 0x55, 0x02, 0x2b, 0x7a, 0xcd, 0x5a,
	0x81, 0xf7, 0x55, 0x75, 0x3f, 0x02, 0x23, 0x1d,  0x3f, 0x02, 0x5f, 0x96, 0xc6, 0xf4, 0xe1, 0x54,
	0xa1, 0xd4, 0xe1, 0xe4, 0x04, 0xbd, 0x9c, 0x54,  0x95, 0xd6, 0x89, 0xd9, 0x34, 0xd4, 0xb9, 0xc8,
	0xce, 0x5d, 0x04, 0x9b, 0x3e, 0x51, 0x33, 0x86,  0x95, 0x76, 0xbb, 0xa5, 0x12, 0x4b, 0xcb, 0x33,
	0x81, 0x55, 0x4f, 0x47, 0x30, 0xd5, 0x85, 0xa7,  0xaf, 0x54, 0x8a, 0x00, 0x31, 0xb0, 0x40, 0x82,
	0x4e, 0x76, 0x7c, 0x7c, 0x5f, 0x23, 0x70, 0x0e,  0x82, 0x83, 0x29, 0xad, 0xe1, 0x60, 0x77, 0x49,
	0x25, 0x4c, 0xa3, 0x69, 0xfd, 0x80, 0xb2, 0x4b,  0xa7, 0x1a, 0x22, 0x01, 0xef, 0x63, 0xf9, 0x4a,
	0x43, 0x43, 0x4c, 0xf9, 0x74, 0x4d, 0x81, 0x78,  0x31, 0xcc, 0x92, 0x69, 0x02, 0x8a, 0x5c, 0x1c,
};

unsigned char mixer_102210[16] = {
	0x94, 0x20, 0x85, 0x10, 0xC2, 0xC0, 0x01, 0xFB,  0x01, 0xC0, 0xC2, 0x10, 0x85, 0x20, 0x94, 0x01,
};

unsigned char forward_sbox_102010[256] = {
	0xFC, 0xEE, 0xD6, 0x11, 0x80, 0xFD, 0x7E, 0x1C,  0x63, 0x18, 0xFA, 0xDA, 0xB0, 0x13, 0x96, 0x4C,
	0xE3, 0x39, 0xB5, 0xDB, 0x01, 0x6A, 0x44, 0x23,  0xC0, 0xA4, 0x26, 0x28, 0x1E, 0xCD, 0x5F, 0x85,
	0x2F, 0x81, 0xB3, 0x8D, 0x7B, 0x56, 0x7D, 0xB9,  0xC4, 0x53, 0xAE, 0x42, 0x19, 0x99, 0x59, 0x4E,
	0xD9, 0x8E, 0x09, 0xE1, 0x70, 0x24, 0x16, 0xAB,  0x06, 0x98, 0x31, 0x45, 0x75, 0x02, 0x41, 0xC3,
	0xAF, 0x7A, 0xF0, 0x5A, 0xEA, 0xC8, 0x48, 0xA1,  0xBC, 0xF7, 0xBE, 0x30, 0xF6, 0x3B, 0xCE, 0xCC,
	0x2C, 0xA7, 0x9C, 0x8A, 0xD5, 0x0C, 0x33, 0xC5,  0x69, 0x36, 0x12, 0x91, 0xD3, 0x60, 0x8B, 0xC9,
	0xC2, 0xAA, 0x0F, 0xB1, 0x10, 0xA6, 0x47, 0xC7,  0xF9, 0x03, 0x37, 0x6E, 0xD2, 0x9E, 0x2A, 0x66,
	0xEF, 0xE7, 0x5D, 0x3C, 0x29, 0xAC, 0x5C, 0xA3,  0xF4, 0x54, 0xC6, 0x57, 0x87, 0x2E, 0x0D, 0xCF,
	0xD4, 0xFF, 0x61, 0xED, 0xAD, 0x3A, 0x43, 0x50,  0x4F, 0xA5, 0x00, 0x20, 0xE5, 0x67, 0x64, 0x9B,
	0x72, 0x0E, 0xEC, 0xDE, 0x3E, 0x94, 0x6D, 0x25,  0xDC, 0xE8, 0x6C, 0x1F, 0xDD, 0x77, 0xD7, 0x05,
	0x3F, 0x4A, 0xF3, 0x79, 0x51, 0x0B, 0x68, 0x92,  0x1A, 0x65, 0x76, 0x82, 0xB2, 0x9F, 0x27, 0x4B,
	0x71, 0x93, 0x90, 0x0A, 0xF1, 0x5E, 0x55, 0xB7,  0x5B, 0x7F, 0x78, 0x38, 0x2D, 0x4D, 0x95, 0xA2,
	0x07, 0x8F, 0x21, 0x04, 0x8C, 0xE2, 0xC1, 0x6F,  0x74, 0xEB, 0xF2, 0x7C, 0x88, 0x9D, 0xA8, 0x89,
	0x73, 0x1B, 0x83, 0x49, 0xDF, 0xE9, 0xF8, 0xFE,  0x14, 0x58, 0x32, 0x08, 0xCA, 0xD8, 0xCB, 0xBD,
	0x2B, 0x34, 0xBB, 0x3D, 0xBF, 0xB8, 0x9A, 0x15,  0x52, 0x46, 0xB6, 0xD0, 0x62, 0xA0, 0x22, 0x1D,
	0x17, 0x35, 0xE6, 0x40, 0xA9, 0xBA, 0xFB, 0x84,  0xD1, 0xF5, 0xE0, 0x86, 0xE4, 0x97, 0xB4, 0x6B,
};

unsigned char inverse_sbox_102110[256] = {
	0x8A, 0x14, 0x3D, 0x00, 0xC3, 0x9F, 0x38, 0xC0,  0xDB, 0x32, 0xB3, 0xA5, 0x55, 0x7E, 0x91, 0x62,
	0x64, 0x03, 0x5A, 0x0D, 0xD8, 0xE7, 0x36, 0xF0,  0x09, 0x2C, 0xA8, 0xD1, 0x07, 0xEF, 0x1C, 0x9B,
	0x8B, 0xC2, 0xEE, 0x17, 0x35, 0x97, 0x1A, 0xAE,  0x1B, 0x74, 0x6E, 0xE0, 0x50, 0xBC, 0x7D, 0x20,
	0x4B, 0x3A, 0xDA, 0x56, 0xE1, 0xF1, 0x59, 0x6A,  0xBB, 0x11, 0x85, 0x4D, 0x73, 0xE3, 0x94, 0xA0,
	0xF3, 0x3E, 0x2B, 0x86, 0x16, 0x3B, 0xE9, 0x66,  0x46, 0xD3, 0xA1, 0x00, 0x0F, 0xBD, 0x2F, 0x88,
	0x87, 0xA4, 0xE8, 0x29, 0x79, 0xB6, 0x25, 0x7B,  0xD9, 0x2E, 0x43, 0xB8, 0x76, 0x72, 0xB5, 0x1E,
	0x5D, 0x82, 0xEC, 0x00, 0x8E, 0xA9, 0x6F, 0x8D,  0xA6, 0x58, 0x15, 0xFF, 0x9A, 0x96, 0x6B, 0xC7,
	0x34, 0xB0, 0x90, 0x00, 0xC8, 0x3C, 0xAA, 0x9D,  0xBA, 0xA3, 0x41, 0x24, 0xCB, 0x26, 0x06, 0xB9,
	0x04, 0x21, 0xAB, 0xD2, 0xF7, 0x1F, 0xFB, 0x7C,  0xCC, 0xCF, 0x53, 0x5E, 0xC4, 0x00, 0x00, 0xC1,
	0xB2, 0x5B, 0xA7, 0xB1, 0x95, 0xBE, 0x0E, 0xFD,  0x39, 0x2D, 0xE6, 0x8F, 0x52, 0xCD, 0x6D, 0xAD,
	0xED, 0x47, 0xBF, 0x77, 0x19, 0x89, 0x65, 0x51,  0xCE, 0xF4, 0x61, 0x37, 0x75, 0x84, 0x2A, 0x40,
	0x0C, 0x63, 0xAC, 0x22, 0xFE, 0x12, 0xEA, 0xB7,  0xE5, 0x27, 0xF5, 0xE2, 0x00, 0xDF, 0x4A, 0xE4,
	0x18, 0xC6, 0x60, 0x3F, 0x28, 0x57, 0x00, 0x67,  0x45, 0x5F, 0xDC, 0xDE, 0x4F, 0x1D, 0x4E, 0x00,
	0xEB, 0xF8, 0x6C, 0x5C, 0x80, 0x54, 0x02, 0x9E,  0xDD, 0x30, 0x0B, 0x13, 0x98, 0x9C, 0x93, 0xD4,
	0xFA, 0x33, 0x00, 0x10, 0xFC, 0x8C, 0xF2, 0x71,  0x99, 0xD5, 0x44, 0xC9, 0x92, 0x83, 0x01, 0x70,
	0x42, 0xB4, 0xCA, 0xA2, 0x78, 0xF9, 0x4C, 0x49,  0xD6, 0x68, 0x0A, 0xF6, 0x00, 0x05, 0xD7, 0x81,
};

unsigned char expected_decrypt[256] = {              
	0x46, 0xe0, 0x5f, 0x62, 0x98, 0x08, 0x29, 0xb4,  0x6e, 0x97, 0x4e, 0xf5, 0x78, 0x65, 0x87, 0xec, 
	0x52, 0x2f, 0x39, 0x08, 0x5a, 0xc5, 0xdb, 0xa7,  0x22, 0x72, 0xb5, 0xf3, 0xe0, 0xdb, 0x52, 0xfc, 
	0xc4, 0x86, 0xf0, 0x83, 0x25, 0xa3, 0x6d, 0x69,  0xf6, 0x8a, 0xfa, 0x14, 0xaa, 0x85, 0x80, 0xc1, 
	0x9b, 0xd7, 0xe3, 0xc8, 0x2c, 0x82, 0x6c, 0x93,  0x21, 0x22, 0x60, 0x27, 0x91, 0xe7, 0x1a, 0xdf, 
	0x46, 0xe0, 0x5f, 0x62, 0x98, 0x08, 0x29, 0xb4,  0x6e, 0x97, 0x4e, 0xf5, 0x78, 0x65, 0x87, 0xec, 
	0x92, 0x48, 0xbb, 0x28, 0x4b, 0x5e, 0x2d, 0xe1,  0x28, 0xe8, 0xb0, 0x2f, 0x20, 0x6b, 0xc0, 0x1b, 
	0xe2, 0x39, 0x38, 0xce, 0x36, 0xaa, 0x52, 0xc1,  0x56, 0x24, 0x09, 0x2c, 0x24, 0x0c, 0x77, 0xe1, 
	0x46, 0xe0, 0x5f, 0x62, 0x98, 0x08, 0x29, 0xb4,  0x6e, 0x97, 0x4e, 0xf5, 0x78, 0x65, 0x87, 0xec, 
	0x86, 0x6f, 0xba, 0xa9, 0x71, 0x5f, 0x4e, 0xf9,  0xea, 0x34, 0x06, 0xad, 0x06, 0x3c, 0xef, 0x05, 
	0x70, 0xed, 0x3f, 0x46, 0x31, 0xb5, 0xe1, 0x3a,  0x5e, 0x8a, 0x13, 0xe7, 0x6c, 0xa9, 0x05, 0xc6, 
	0xba, 0x7c, 0x20, 0xf1, 0x68, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};                                                   
                                                     
unsigned char expected_encrypt[256] = {                                                                                                                   
	0x7d, 0xef, 0x55, 0x25, 0xa0, 0xb8, 0xfe, 0x1e,  0x54, 0x4a, 0x54, 0x78, 0x78, 0xbb, 0x47, 0x75, 
	0xc5, 0x84, 0x42, 0xa7, 0x23, 0x35, 0x78, 0x87,  0x1e, 0xce, 0xab, 0xeb, 0x6c, 0x17, 0x51, 0x9d, 
	0xeb, 0xd4, 0x74, 0x5b, 0x78, 0x49, 0xc9, 0xe1,  0xff, 0x10, 0x3a, 0xef, 0x70, 0x1c, 0xf6, 0x56, 
	0x02, 0x65, 0xb7, 0x41, 0x38, 0x0f, 0x0c, 0x36,  0xba, 0x30, 0x45, 0x35, 0xaa, 0x4f, 0x0c, 0x57, 
	0x7d, 0xef, 0x55, 0x25, 0xa0, 0xb8, 0xfe, 0x1e,  0x54, 0x4a, 0x54, 0x78, 0x78, 0xbb, 0x47, 0x75, 
	0x24, 0xf1, 0x85, 0xa5, 0x68, 0xa2, 0xb7, 0xb8,  0x0d, 0x1d, 0x94, 0xe1, 0x23, 0x60, 0xcb, 0x48, 
	0x84, 0xf2, 0xab, 0xb1, 0x5c, 0x93, 0x37, 0x39,  0x2a, 0xe3, 0xca, 0x7e, 0x14, 0xc4, 0x3f, 0xf6, 
	0x7d, 0xef, 0x55, 0x25, 0xa0, 0xb8, 0xfe, 0x1e,  0x54, 0x4a, 0x54, 0x78, 0x78, 0xbb, 0x47, 0x75, 
	0x2c, 0x15, 0x1b, 0xeb, 0x00, 0xf2, 0x55, 0x46,  0x5c, 0xa3, 0x74, 0xf3, 0x7b, 0x17, 0x23, 0x32, 
	0xef, 0x9f, 0xc2, 0xd6, 0xef, 0x91, 0x40, 0xcf,  0x8f, 0x1c, 0xbf, 0xdd, 0x4a, 0xb0, 0x28, 0x62, 
	0x70, 0xaa, 0xaa, 0x76, 0xec, 0x26, 0x35, 0x86,  0x3c, 0x0e, 0x7a, 0x49, 0xcb, 0xa7, 0x3d, 0x43, 
	0x2b, 0xea, 0xdf, 0xf4, 0x43, 0x95, 0x4a, 0xc3,  0xc0, 0x30, 0x34, 0x11, 0x69, 0xef, 0x52, 0x1b, 
	0x1e, 0x51, 0xb3, 0xb1, 0x7c, 0x85, 0x7c, 0xea,  0x3b, 0x20, 0xab, 0x95, 0xe1, 0x41, 0x9f, 0x70, 
	0xa1, 0x22, 0x56, 0x69, 0xa4, 0xa8, 0x9b, 0x6b,  0x1e, 0x10, 0xa8, 0x9e, 0xc4, 0x95, 0x90, 0x9d, 
	0xff, 0xbc, 0x21, 0xbc, 0xc9, 0x5e, 0xff, 0x59,  0x6a, 0x59, 0x74, 0xa8, 0xf8, 0xe5, 0xc1, 0x5e, 
};                                                   


void print_data(unsigned char buffer[], int buflen) {
	for(int i=0; i<buflen; i+=16) {
		for(int j=i; j<i+16; j++) {
			printf("%02x ", buffer[j]);
			if ( (j+1)%16 == 8) printf(" ");
		}
		printf("  ");
		for(int j=i; j<i+16; j++) {
			unsigned char c = buffer[j];
			if (0x20 <= c && c <= 0x7e) printf("%c",c);
			else printf(".");
		}
		printf("\n");
	}
}

unsigned char sub_129(unsigned char a, unsigned char b) {
	// entry: 0xae, 0x94
	unsigned char acc=0;  // Y+1
	//char a;  // Y+2
	//char b;  // Y+3
	for ( ; b!=0; b>>=1) {
		if (b&1) acc ^= a;
		a = (a<<1) ^ (a&0x80 ? 0xc3 : 0x0);
		// printf("[%02x %02x %02x]  ", a,b,acc);
	}
	return acc;
}

void mixcolumns_155(unsigned char state[16]) {
	short j;          // Y+1..2
	short i;          // Y+3..4
	unsigned char c;  // Y+5
	//char** state;   // Y+6..7
	for (i = 0; i<16; i++) {
		c = state[0+15];
		for (j = 14; j>=0; j--) {
			state[j+1] = state[j];
			c ^= sub_129(state[j], mixer_102210[j]);
		}
		state[0] = c;
		// printf("intermediate mixing:  "); print_data(state, 16);
	}
	return;
}

void inv_mixcolumns_1af(unsigned char state[16]) {
	short j;          // Y+1..2
	short i;          // Y+3..4
	unsigned char c;  // Y+5
	//char** state;   // Y+6..7
	for (i = 0; i<16; i++) {
		c = state[0];
		for (j = 0; j<15; j++) {
			state[j] = state[j+1];
			c ^= sub_129(state[j], mixer_102210[j]);
		}
		state[15] = c;
		// printf("intermediate mixing:  "); print_data(state, 16);
	}
	return;
}

void block_encrypt_568(unsigned char schedule[160], unsigned char *buffer) {
	// stack frame: 0x30 -- 48 bytes -- 6 qwords
	short i;            // Y+0x01 .. Y+0x02
	short j;            // Y+0x03 .. Y+0x04
	unsigned char state[16];     // Y+0x05 .. Y+0x14
	//char** schedule;    // Y+0x15 .. Y+0x16 -- 0x3e3c
	//char** buffer;      // Y+0x17 .. Y+0x18 -- 0x3faa
	//char unused1[8];    // Y+0x19 .. Y+0x20 -- temp swap
	//char unused2[16];   // Y+0x21 .. Y+0x30 -- temp swap
	unsigned char a[16], b[16];

	for (i=0; i<16; i++) {
		state[i] = buffer[i];
	}
	// printf("------------------------------------------------------------------------------------------------\n");
	// printf("entry line:    ");
	// print_data(buffer, 16);
	// printf("initial sched: ");
	// print_data(schedule+0x90, 16);
	// printf("initial state: ");
	// print_data(state, 16);
	// printf("\n");

	for (i=0; i<ROUNDS; i++) {
		for (j=0; j<16; j++) {
			if (true) {
				a[j] = schedule[i*16+j];
				b[j] = state[j]^a[j];
				state[j] = forward_sbox_102010[b[j]];
			} else {
				state[j] ^= schedule[i*16+j];
				state[j] = forward_sbox_102010[state[j]];
			}
		}
		// printf("schedule line: ");
		// print_data(a, 16);
		// printf("post sbox:     ");
		// print_data(b, 16);
		// printf("next state:    ");
		// print_data(state, 16);
		mixcolumns_155(state);
		// printf("mix-columns:   ");
		// print_data(state, 16);
		// printf("\n");
	}

	for (i=0; i<16; i++) {
		buffer[i] = state[i] ^ schedule[0x90+i];
	}
	// printf("final state:   ");
	// print_data(buffer, 16);
}

void block_decrypt_702(unsigned char schedule[160], unsigned char *buffer) {
	// stack frame: 0x30 -- 48 bytes -- 6 qwords
	short i;            // Y+0x01 .. Y+0x02
	short j;            // Y+0x03 .. Y+0x04
	unsigned char state[16];     // Y+0x05 .. Y+0x14
	//char** schedule;  // Y+0x15 .. Y+0x16 -- 0x3e3c
	//char** buffer;    // Y+0x17 .. Y+0x18 -- 0x3faa
	//char unused1[8];  // Y+0x19 .. Y+0x20 -- temp swap
	//char unused2[16]; // Y+0x21 .. Y+0x30 -- temp swap
	unsigned char a[16], b[16];

	for (i=0; i<16; i++) {
		state[i] = buffer[i] ^ schedule[0x90+i];
	}
	// printf("------------------------------------------------------------------------------------------------\n");
	// printf("entry line:    ");
	// print_data(buffer, 16);
	// printf("initial sched: ");
	// print_data(schedule+0x90, 16);
	// printf("initial state: ");
	// print_data(state, 16);
	// printf("\n");

	for (i=ROUNDS-1; i>=0; i--) {
		inv_mixcolumns_1af(state);
		// printf("mix-columns:   ");
		// print_data(state, 16);
		for (j=0; j<16; j++) {
			if (true) {
				a[j] = schedule[i*16 + j];
				b[j] = inverse_sbox_102110[state[j]];
				state[j] = a[j]^b[j];
			} else {
				state[j] = inverse_sbox_102110[state[j]];
				state[j] ^= schedule[i*16 + j];
			}
		}
		// printf("post sbox:     ");
		// print_data(b, 16);
		// printf("schedule line: ");
		// print_data(a, 16);
		// printf("next state:    ");
		// print_data(state, 16);
		// printf("\n");
	}

	for (i=0; i<16; i++) {
		buffer[i] = state[i];
	}
	// printf("final state:   ");
	// print_data(buffer, 16);

	// // printf("------------------------------------------------------------------------------------------------\n");
	return;
}

void decrypt_data_8f1(unsigned char buffer[24], short length) {
	// alloc 0xc6 on stack
	short i;              // Y+1
	//char schedule[160]; // Y+3      -- 0x3d3c
	//char array[32];     // Y[0xa3]  --
	//char** buffer;      // Y[0xc3]  -- 0x3e0a
	//short* length;      // Y[0xc5]

	/*
	for (i=0; i<32; i++) {
		array[i] = key_102268[i];
	}
	key_schedule_207(schedule, array); // key scheduling
	printf("Decrypting data\n");
	*/

	for (i=0; i<length; i+=16) {
		block_decrypt_702(simulated_schedule, buffer+i); // block encryption -- 16 bytes
	}
}

void encrypt_data(unsigned char buffer[24], short length) {
	for (int i=0; i<length; i+=16) {
		block_encrypt_568(simulated_schedule, buffer+i); // block encryption -- 16 bytes
	}
}

void fix_sbox() {
	for (int i=0; i<256; i++) {
		inverse_sbox_102110[forward_sbox_102010[i]] = i;
	}
}

int main(int argc, char** argv) {
	//short decoded = 0;  // Y+1,2
	short length = 240;   // Y+3,4
	//char  choice = 0;   // Y+5
	unsigned char  known[240];  // Y+6..0xF6 -- 240 bytes, plus null terminator
	unsigned char  reverse[240];

	fix_sbox();

	printf("********************************************************************************\n");
    unsigned char  testing[17] = "0123456789abcdef";
	print_data(testing, 16); printf("\n");
	encrypt_data(testing, 16);
	print_data(testing, 16); printf("\n");
	decrypt_data_8f1(testing, 16);
	print_data(testing, 16); printf("\n");

	// return 0;

	printf("********************************************************************************\n");
	////  Try a Decrypt  ////
	for (int i=0; i<length; i++) {
		known[i] = known_102308[i];
	}
	printf("Raw Ciphertext\n");
	print_data(known, length);
	printf("\n");

	decrypt_data_8f1(known, length);

	printf("Decryption\n");
	print_data(known, length);
	printf("\n");

	printf("Garbage: ");
	for (int i=0;i<240;i++) printf("%c", known[i]);
	printf("\n");

	printf("Deltas expected decrypt\n");
	for (int i=0; i<length; i++) {
		known[i] ^= expected_decrypt[i];
	}
	print_data(known, length);

	printf("********************************************************************************\n");
	////  Reverse Path  ////
	for (int i=0; i<length; i++) {
		reverse[i] = known_102308[i];
	}
	encrypt_data(reverse, length);

	printf("Try Encryption Instead\n");
	print_data(reverse, length);
	printf("\n");

	printf("Deltas expected encrypt\n");
	for (int i=0; i<length; i++) {
		reverse[i] ^= expected_encrypt[i];
	}
	print_data(reverse, length);

	printf("********************************************************************************\n");
	////  Checking  ////
	for (int i=0; i<length; i++) {
		known[i] = known_102308[i];
	}
	decrypt_data_8f1(known, length);
	encrypt_data(known, length);
	printf("Re-Encryption\n");
	print_data(known, length);
	printf("\n");

	printf("Deltas\n");
	for (int i=0; i<length; i++) {
		known[i] ^= known_102308[i];
	}
	print_data(known, length);
	printf("\n");

	return 0;
}

